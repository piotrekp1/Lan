// interesting consequence of combining functional - functions are variables - motto with a state


// Random Variable implemenation
x :: Int;
temp :: Int;
temp2 :: Int;
temp2 = 1;

mod :: Int -> Int -> Int;
def mod a b := a - (a/b*b);

even :: Int -> Bool;
def even x := mod x 2 == 0;

next_rand_10 :: Int -> Int;
def next_rand_10 x := {
    temp2 += x + 3001; // some cheap implemenation of a random function
    if even temp2 then mod ((temp2)*2197) 7 else mod ((temp2 + 7)/2* 3187) 7;
};

next :: Int -> Int;
def next x := x + 1;


temp = 5;
def x := temp = next_rand_10 temp;

// usage

i :: Int; i = 0;
while i++ < 10 : print (show x); // everytime new random number


// in a second version of a Lan i would like to allow user to explicitely choose way of calling function, lazy i stricly (i have a planned mode in between too), so you could for example create a function that returns random variables like these above, for it's not possible because calls are always strict


